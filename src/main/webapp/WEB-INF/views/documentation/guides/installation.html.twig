{% extends "documentation/guides/guide" %}

{% block pageheader %}
	<h1>Get Started</h1> 
    <p>A sleek modern java templating engine.</p>
{% endblock pageheader %}

{% block guideTitle %}Installation & Configuration{% endblock %}

{% block guideContent %}
		
		<h3>Installation</h3>
		<p>
			Pebble is hosted in the Maven Central Repository. Simply add the following dependency into your <code>pom.xml</code>
			file:
		</p>
		<p>
			<pre>{{ '
<dependency>
	<groupId>com.mitchellbosecke</groupId>
	<artifactId>pebble</artifact>
	<version>' | trim | escape }} {{ currentVersion }} {{ '</version>
</dependency>' | trim | escape }}</pre>
		</p>
		
		<h3>System Requirements</h3>
		<p>
			The Pebble engine uses the Java Compiler API in order to compile templates into Java bytecode. This
			means that a JDK is required as opposed to a standard JRE.
		</p>
		<p>
			Pebble has been tested to work in Tomcat 7, Jetty 9, and Glassfish 3. It does however fail to work 
			in JBoss AS 7 and Glassfish 4 (see <a href="https://github.com/mbosecke/pebble/issues">known issues</a>).
			Pebble does not need to be run inside of a container.
		</p>
		
		<h3>Set Up</h3>
		<p>
			If you are integrating Pebble with Spring MVC, read <a href="spring-integration">this guide</a>.
		</p>
		
  		<p>
  			You will want to begin by creating a {{ api(currentVersion, null, 'PebbleEngine') }} which is
  			responsible for compiling your templates.
		</p>
  		<pre class="java">{{ '
PebbleEngine engine = new PebbleEngine();
				' | trim | escape }}</pre> 
		<p>
			And now, with your new <code>PebbleEngine</code> instance you can start compiling templates.
		</p>
		
  		<pre class="java">{{ '
PebbleTemplate compiledTemplate = engine.compile("templateName");
		' | trim | escape }}</pre> 
		<p>
			Finally, simply provide your compiled template with a <code>Writer</code> object and
			a <code>Map</code> of variables to get your output!
		</p>
  		<pre class="java">{{ '
Writer writer = new StringWriter();

Map<String, Object> context = new HashMap<>();
context.put("name", "Mitchell");

compiledTemplate.evaluate(writer, context);

String output = writer.toString();
				' | trim | escape }}</pre> 
		</p>
		
		<h3>Custom Loader</h3>
		<p>
			The constructor for <code>PebbleEngine</code> can be invoked with
			a {{ api(currentVersion, 'loader', 'Loader') }} implementation as an argument.
			A <code>Loader</code> is responsible for finding your templates and 
			returning an associated <code>java.io.Reader</code> object.  
		</p>
		<p>
			If you do not provide a custom Loader, Pebble will use a default implementation.
			The default implementation uses several techniques to find your templates:
			<ul>
				<li><code>Thread.currentThread().getContextClassLoader().getResourceAsStream(templateName)</code></li>
				<li><code>DefaultLoader.class.getClassLoader().getResourceAsStream(templateName)</code></li>
				<li><code>new File(...)</code>
			</ul>
		</p>
		
		<h3>Pebble Engine Settings</h3>
		<p>
			Take a look at the API for the {{ api(currentVersion, null, 'PebbleEngine') }} class
			to find the methods needed to modify the below settings.
		</p>
		<p>
			<dl class="dl-horizontal">
				<dt>cache</dt>
				<dd>
					An implementation of the {{ api(currentVersion, 'cache', 'TemplateLoadingCache') }} interface that the Pebble engine will use
					to cache compiled templates. 
					<br> 
					Default: {{ api(currentVersion, 'cache', 'DefaultTemplateLoadingCache') }}
				</dd>
				<dt>defaultLocale</dt>
				<dd>
					The default locale which will be passed to each compiled template. The templates then use this
					locale for functions such as <code><a href="../function/message">message</a></code>, etc. A
					template can also be given a unique locale during evaluation.
					<br>
					Default: <strong><code>Locale.getDefault()</code></strong>
				</dd>
				<dt>executorService</dt>
				<dd>
					An <code>ExecutorService</code> that allows the usage of some advanced multithreading features, 
					such as the	<code><a href="../tag/parallel">parallel</a></code> tag.
					<br> 
					Default: <strong>null</strong> 
				</dd>
				<dt>loader</dt>
				<dd>
					An implementation of the {{ api(currentVersion, 'loader', 'Loader') }} interface which is used to
					find and read templates.
					<br>
					Default: {{ api(currentVersion, 'loader', 'DefaultLoader') }}
				</dd>
				<dt>strictVariables</dt>
				<dd>
					If set to true, Pebble will throw an exception if you try to access a variable or attribute
					that does not exist. If set to false, your template won't skip a beat. 
					<br>
					Default: <strong>false</strong>
			</dl>
		</p>
		
		<a class="btn btn-success btn-lg" href="basic-usage">Basic Usage <span class="glyphicon glyphicon-circle-arrow-right"></span></a>
{% endblock %}