{% extends 'base' %}

{% block navigation %}
	{% set activeNav = "Home" %}
	{{ parent() }}
{% endblock navigation %}

{% block pageheader %}
	<h1>Pebble</h1> 
    <p>A modern Java templating engine that goes lightning fast.</p>
    <p>
		<button class="btn btn-success btn-lg" href="get-started">Get started</button>
	</p>
	<p>
		Version: <a class="version-number" href="blog">0.0.1-alpha</a>
	</p>
{% endblock pageheader %}

{% block content %}

	<div class="pebble-what">
		<div class="container">
		    <div class="row">
				<div class="col-md-6">
				    <h2>Synopsis</h2>
				    <p>
				    	Pebble is a Java templating engine which originally started as a port of Twig. 
				    	It uses modern paradigms such as inheritance and composition to maximize code reuse, it uses
				    	a Django inspired syntax for excellent readability, and it
				    	compiles all templates into Java bytecode for optimal performance. 
				    </p>
		    	</div>
			    <div class="col-md-6">
<pre class="pebble-code-preview"><code>{{
'{% extends "base" %}	

{% block navigation %}
	{% set activeNav = "Home" %}
	{{ parent() }}
{% endblock navigation %}' 
}}</code></pre>
			    </div>
		    </div>
		</div>
	</div>

    <div class="pebble-features">
    	<div class="container">
    	
    	 	<h2>Features</h2>
    
    		<div class="row">
    			<div class="col-md-4">
					<h4>Logic & Expressions</h4>
				    <p>
				    	Pebble gives you the ability to iterate through collections,
				    	use if statements, conditional operators, and manipulate variables
				    	all with a very concise and easy-to-read syntax.
				    </p>
    			</div>
    			<div class="col-md-4">
					<h4>Inheritance</h4>
				    <p>
				    	The most important feature that makes Pebble stand out from
				    	the crowd is the ability for templates to inherit from each other. Write
				    	your structure or scaffolding code once, and then extend from that template
				    	to reuse it over and over again. Create chains of inheritance to maximize 
				    	this potential.
				    </p>
			   </div>
			   <div class="col-md-4">
					<h4>Composition & Macros</h4>
				    <p>
				    	Import the entire rendered output of one template into another with one simple
				    	statement. If you want more fine grained control, you can write
				    	"macros" which are lightweight reusable elements that can be used anywhere.
				    </p>
			   </div>
			</div><!-- end row -->
			
			<div class="row pebble-secondary-features">
				<dl class="dl-horizontal">
					<dt>Filters & Tests</dt>
					<dd>There are numerous built in filters that allow you to abbreviate or 
				    	capitalize text, format dates or numbers, encode json, provide defaults to 
				    	null values, and much more. Beyond filters there are also "tests"
				    	to check if your variables are null, even, odd, iterable, etc 
			    	</dd>
			    	<dt>Extensibility</dt>
					<dd>Pebble was built from the ground up with the philosophy that it should 
						be able to adapt to any project. Create your own tags, filters, tests, 
						functions, and even operators. 
			    	</dd>
					<dt>Documented</dt>
					<dd>Pebble is fully documented with detailed descriptions of every feature as
						well as recipes for advanced techniques. 
			    	</dd>
				</dl>
			</div>
    	</div><!-- end container -->
    </div><!-- end features -->
   
{% endblock content%}