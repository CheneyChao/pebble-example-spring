{% extends "base" %} {% block navigation %} {% set activeNav =
"Contributing" %} {{ parent() }} {% endblock navigation %} {% block
pageheader %}
<h1>Pebble</h1>
<p>A sleek modern java templating engine.</p>
{% endblock pageheader %} {% block content %}
<div class="container">

	<h2>Contributing</h2>
	
	<h3>Contributers</h3>
	<p> No one has contributed yet :( </p>

	<h3>Help Wanted</h3>
	<p>Contributors of all types are welcome but most importantly I am
		looking for help with the following:	
	<ul>
		<li>IDE Integration</li>
		<li>API Feedback</li>
		<li>Testing and Bug Reports</li>
		<li>Performance Optimizations</li>
		<li>Improving Thread Safety</li>
	</ul>
	</p>
	<p>
		General improvements are welcome, otherwise you can help tackle some of the <a href="https://github.com/mbosecke/pebble/issues">known issues</a>.
	</p>

	<h3>Getting Started</h3>
	<p>	
	<ul>
		<li>Use git to clone the repository from <a
			href="https://github.com/mbosecke/pebble">github</a>.
		</li>
		<li>Use maven to build and test: <code>mvn clean install</code>
		</li>
	</ul>
	</p>

	<h3>Understanding the Code</h3>
	<p>There are a few major components that play a vital role in the
		compilation process. The main {{ api(currentVersion, null,
		'PebbleEngine') }}, the {{ api(currentVersion, 'lexer', 'LexerImpl')
		}}, the {{ api(currentVersion, 'parser', 'ParserImpl') }}, and the {{
		api(currentVersion, 'compiler', 'CompilerImpl') }}.</p>
		
	<p>
		The <code>PebbleEngine</code> is responsible for beginning
		the compilation process. It begins by passing the template source to the <code>Lexer</code>.
	</p>
	
	<p>
		The <code>Lexer</code> is responsible for converting the template
		into a bunch of {{ api(currentVersion, 'lexer', 'Token') }} objects. A <code>Token</code>
		is the smallest distinguishable unit in a template, i.e. it can not be broken down into
		more specific objects. A <code>Token</code> can represent a delimiter (eg. <code>{{ '{{ '}}</code>),
		or a function name, a string, plain text, or many other things. Once the <code>Lexer</code>
		has established the entire stream of tokens which collectively make up the entire template, it returns this
		{{ api(currentVersion, 'lexer', 'TokenStream') }} back to the main <code>PebbleEngine</code>.
	<p>
	<p>
		The <code>PebbleEngine</code> now sends the <code>TokenStream</code> to the 
		{{ api(currentVersion, 'parser', 'Parser') }} which is responsible for turning
		those <code>Token</code> objects into {{ api(currentVersion, 'node', 'Node') }} objects.
		The nodes make up the entire abstract syntax tree. Each <code>Node</code> is
		responsible to know how to compile itself into Java. The parser uses the help of the main 
		{{ api(currentVersion, 'parser', 'ExpressionParser') }} as well as the 
		{{ api(currentVersion, 'tokenParser', 'TokenParser') }} objects which are provided by the 
		extensions.
	<p>
	<p>
		The <code>PebbleEngine</code> now has a tree of <code>Node</code> objects, beginning
		with the {{ api(currentVersion, 'node', 'NodeRoot') }}. It passes this <code>NodeRoot</code>
		to the {{ api(currentVersion, 'compiler', 'Compiler') }} which calls the <code>compile</code>
		method of the <code>NodeRoot</code> object. The <code>NodeRoot</code> object now compiles itself
		into Java by calling the <code>compile</code> method of it's children nodes. This process
		recurses throughout the whole abstract syntax tree until all nodes have compiled themselves into Java.
		The <code>Compiler</code> is finally left with the complete Java code. It then invokes the Java Compiler API to 
		turn that Java code into bytecode (i.e an actual {{ api(currentVersion, 'template', 'PebbleTemplateImpl') }}
		instance). The <code>Compiler</code> then returns this <code>PebbleTemplate</code> back to the <code>PebbleEngine</code>.
	</p>
	<p>
		The <code>PebbleEngine</code> then places this <code>PebbleTemplate</code> into the cache
		and returns it to the user.
	</p>
	<h3>Contributing Code</h3>
	<p>
		Currently there aren't any formal guidelines. Just ensure that your changes include any
		necessary unit tests and send me a pull request on <a href="https://github.com/mbosecke/pebble">github</a>!
	</p>
</div>
{% endblock content%}